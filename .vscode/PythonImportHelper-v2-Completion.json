[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "UnidentifiedImageError",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    error = None\n    if request.method == \"POST\":\n        file = request.files[\"image\"]\n        if file:\n            try:\n                # File Save\n                file_path = os.path.join(\"static/uploads\", file.filename)\n                file.save(file_path)\n                # Image Processing",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "live_emotion_detection",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def live_emotion_detection():\n    return render_template(\"live.html\")\n# Route to generate frames for live emotion detection\ndef generate_frames():\n    cap = cv2.VideoCapture(0)  # Start webcam\n    while True:\n        success, frame = cap.read()\n        if not success:\n            break\n        # Convert frame to grayscale",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generate_frames",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generate_frames():\n    cap = cv2.VideoCapture(0)  # Start webcam\n    while True:\n        success, frame = cap.read()\n        if not success:\n            break\n        # Convert frame to grayscale\n        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n        # Detect faces\n        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "video_feed",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def video_feed():\n    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')\n@app.route('/contact')\ndef contact():\n    return render_template('contact.html')  # Ensure you have a contact.html template\nif __name__ == \"__main__\":\n    app.run(debug=False,host='0.0.0.0')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def contact():\n    return render_template('contact.html')  # Ensure you have a contact.html template\nif __name__ == \"__main__\":\n    app.run(debug=False,host='0.0.0.0')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n# Model Load\nmodel = load_model(\"models/emotion_model.keras\")\n# Emotion labels\nemotion_labels = ['angry', 'disgust', 'fear', 'happy', 'neutral', 'sad', 'surprise']\n# Initialize Haar Cascade Classifier for face detection\nface_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n# Route for Home Page\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model = load_model(\"models/emotion_model.keras\")\n# Emotion labels\nemotion_labels = ['angry', 'disgust', 'fear', 'happy', 'neutral', 'sad', 'surprise']\n# Initialize Haar Cascade Classifier for face detection\nface_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n# Route for Home Page\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    error = None\n    if request.method == \"POST\":",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "emotion_labels",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "emotion_labels = ['angry', 'disgust', 'fear', 'happy', 'neutral', 'sad', 'surprise']\n# Initialize Haar Cascade Classifier for face detection\nface_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n# Route for Home Page\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    error = None\n    if request.method == \"POST\":\n        file = request.files[\"image\"]\n        if file:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "face_cascade",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n# Route for Home Page\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    error = None\n    if request.method == \"POST\":\n        file = request.files[\"image\"]\n        if file:\n            try:\n                # File Save",
        "detail": "app",
        "documentation": {}
    }
]